/ MARIE Assembly coursework:

/ Perform recursive subtraction to simulate division.
/ Find out if user input (n) is prime or composite.

/ Program will take inputs (x) and (y).
/ Program will output how many times (y) fits into (x) evenly.
/ program will then (if there is one) output the remainder (z).

/ Program will take input (n) and determine if prime or composite.
/ If (n) is prime, program will output 1.
/ If (n) is composite, program will ouput 0.

/ Range of inputs: Program has been tested with the first 50 primes and works every time.
/ User cannot enter a negative number, however they may enter a large number but will suffer a large wait time

/ ***** MAIN BODY OF CODE *****

/ Get user inputs & validate them
JNS	VALIDATENUM
JNS 	VALIDATEDENOM

JNS	DIVIDE

/ Output how many times DENOM went into NUM
/ Output the quotient (if it's an even division - output 0)
Load 	LOOPS
Output
Load	NUM
Output

/ Get user input & validate
JNS 	VALIDATENUM
Load	COUNT
Store	DENOM

/ If NUM = 2 then automatically output PRIME = TRUE
Load	NUM
Subt	TWO
Skipcond 800 / If input > 2 check prime, else output not prime
Jump	OverridePrime
JNS 	CHECKPRIME
Jump	NormalPrime

/ Output PRIME 
/ If input is prime, program will output 1 (TRUE)
/ If input is not prime, program will ouput 0 (FALSE)
NormalPrime,	Load	PRIME
		Output
		Jump	EndProgram
OverridePrime,	Load	TRUE
		Store	PRIME
		Load	PRIME
		Output
		Jump	EndProgram
EndProgram,	Halt / END PROGRAM HERE

/ ***** SUBROUTINES *****

/ PRIME NUMBER CHECKING SUBROUTINE

/ How does this subroutine work? Briefly...

/ We have a counter going up from 2 to the size of (n) (the input)
/ We use our divide method to divide (n) by the counter
/ If the remainder of the above division is 0, the number IS NOT prime as it divided evenly by another number
/ We load one into the AC, store it in PRIME and output the result

CHECKPRIME,	HEX	000
	LoopPrime,	Load	NUM
			Subt	DENOM
			Skipcond 800 / If (counter = input number) end loop
			Jump	CounterUp 
			
			JNS	DIVIDE
			Load	NUM

			Skipcond 800 / If (AC > 0) output number IS prime
			Jump	NotPrime
			Jump	IsPrime

			IsPrime,	Load	TRUE
					Store	PRIME
					Jump 	EndLoopPrime
			NotPrime,	Load 	DENOM
					Add	ONE
					Store	DENOM
					Jump	LoopPrime
			CounterUp,	Load	FALSE
					Store	PRIME
					Jump	EndLoopPrime
					
	EndLoopPrime,	JumpI	CHECKPRIME

/ DIVISION SUBROUTINE

/ How does this subroutine work? Briefly...

/ We get the user input (x)
/ We get the user input (y)
/ We subtract (y_ from (x)
/ With each successful subtraction with a reminder over 0, we add 1 to our loop counter
/ As soon as we get a subtraction with a remainder less than 0, we output the loops and the remainder 

DIVIDE, 	HEX 	000 
	Loop, 	Load 	NUM

		If,	Load	NUM
			Subt	DENOM

			Skipcond 800 / (If NUM - DENOM > 0) add 1 to loops completed
			Jump Else
			
			Store 	NUM

        		Load 	LOOPS
			Add 	ONE
			Store 	LOOPS

			Jump 	Loop
		Else,	Load 	NUM
			Subt 	DENOM

			Skipcond 400 / If (NUM - DENOM = 0) DENOM goes into NUM evenly
			Jump 	EndLoop
			
			Store 	NUM

        		Load 	LOOPS
			Add 	ONE
			Store 	LOOPS

			Jump 	Loop
	EndLoop, 	JumpI 	DIVIDE

/ NUMERATOR VALIDATION SUBROUTINE

/ How does this subroutine work? Briefly...

/ Simple, we do not allow inputs less than or equal to 0

VALIDATENUM,	HEX 	000
	Val, 	Load 	NUM
		Input
		Store	NUM
		Load	NUM

		Skipcond 000 / If (NUM > 0) it is valid
		Jump 	Endval

		Jump 	Val	
	Endval, 	JumpI	VALIDATENUM

/ DENOMENATOR VALIDATION SUBROUTINE

/ How does this subroutine work? Briefly...

/ Simple, we do not allow inputs less than or equal to 0

VALIDATEDENOM,	HEX 	000
	Val2, 	Load 	DENOM
		Input
		Store	DENOM
		Load	DENOM

		Skipcond 000 / If (DENOM > 0) it is valid
		Jump 	Endval2

		Jump 	Val2
	Endval2, 	JumpI	VALIDATEDENOM

/ ***** VARIABLES *****

NUM, 	DEC 	0
DENOM, 	DEC 	0
LOOPS, 	DEC 	0
ONE, 	DEC 	1
COUNT, 	DEC	2
TRUE,	DEC	1
FALSE,	DEC 	0
PRIME,	DEC	0
TWO,	DEC	2